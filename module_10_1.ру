import threading
from time import sleep, time


def write_words(word_count, file_name):
    with open(file_name, 'w') as f:
        for i in range(1, word_count + 1):
            f.write(f"Какое-то слово № {i}\n")
            sleep(0.1)
    print(f"Завершилась запись в файл {file_name}")


def measure_time(func, *args):
    """Функция для измерения времени выполнения."""
    start_time = time()
    func(*args)
    end_time = time()
    return end_time - start_time


# Вызовы функций
print("Запуск функций:")
time1 = measure_time(write_words, 10, 'example1.txt')
time2 = measure_time(write_words, 30, 'example2.txt')
time3 = measure_time(write_words, 200, 'example3.txt')
time4 = measure_time(write_words, 100, 'example4.txt')

total_function_time = time1 + time2 + time3 + time4
print(f'Время выполнения функций: {total_function_time:.6f}')

# Создание и запуск потоков
print("\nЗапуск потоков:")
threads = []
thread_args = [
    (10, 'example5.txt'),
    (30, 'example6.txt'),
    (200, 'example7.txt'),
    (100, 'example8.txt')
]

start_time_threads = time()
for args in thread_args:
    thread = threading.Thread(target=write_words, args=args)
    threads.append(thread)
    thread.start()

# Ожидание завершения всех потоков
for thread in threads:
    thread.join()

end_time_threads = time()
print(f'Время выполнения потоков: {end_time_threads - start_time_threads:.6f}')